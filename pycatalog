#!/usr/bin/env python3
# coding: utf-8
# vim: et ts=4 st=4 sts=4 sw=4

import sys
from argparse import ArgumentParser
from logging import getLogger, Formatter, StreamHandler, INFO, DEBUG
import pureyaml
import os
from os.path import exists, islink, realpath, join as pathjoin
import phantomfs
from multiprocessing import Process
from threading import Thread
import time
from subprocess import Popen, TimeoutExpired
from telnetlib import Telnet


log = getLogger(__name__)
debug = False


class PhantomFSProcess(Process):
    def __init__(self, *args):
        super().__init__(name='PhantomFS', args=args)

    def run(self):
        log.debug('mounting phantomfs with ' + str(self._args))
        phantomfs.main(self._args)

    def terminate(self):
        super().terminate()
        time.sleep(0.1)
        try:
            os.rmdir(pathjoin(self._phantoms_dir, name))
        except:
            pass


class IndexThread(Thread):
    field_sep = '|'
    _wait_for_check_sec = 10

    def __init__(self, phantoms_dir, name, mount_point):
        super().__init__(name='Indexing')
        self._tmp_file = pathjoin(phantoms_dir, '.' + name + '.ls')
        self._index_file = pathjoin(phantoms_dir, name + '.ls')
        self._last_mod_file = pathjoin(phantoms_dir, name + '.time')
        self._dir = mount_point
        self._emergency_exit = False

    def run(self):
        log.debug('index thread to %s started' % self._dir)
        while not self._emergency_exit:
            self._try_indexing()
            for i in range(self._wait_for_check_sec * 10):
                time.sleep(0.1)
                if self._emergency_exit:
                    break
        log.debug('index thread to %s stopped' % self._dir)

    def _compute_last_modif(self):
        try:
            last_modif = os.stat(pathjoin(self._dir, '.')).st_mtime_ns
            if last_modif == 0:  # fat system
                for f in os.listdir(self._dir):
                    last_modif += os.stat(pathjoin(self._dir, f)).st_mtime_ns
            return last_modif
        except OSError:
            return 0

    def _try_indexing(self):
        if not exists(self._dir):
            self._emergency_exit = True
            return
        last_modif = int(open(self._last_mod_file).read()) if exists(self._last_mod_file) else 0
        curr_modif = self._compute_last_modif()
        if curr_modif <= last_modif:
            return
        log.info('indexing %s to %s' % (self._dir, self._index_file))
        args = r'''find "{dir}" -name '[.$]*' -prune -o -printf '%P{sep}%y{sep}%s\n' | gzip > "{out}"'''.format(dir=self._dir, sep=self.field_sep, out=self._tmp_file)
        try:
            p = Popen(args, shell=True)
            find_finished = False
            while not self._emergency_exit and not find_finished:
                try:
                    p.wait(1)
                    find_finished = True
                except TimeoutExpired:
                    pass
            if self._emergency_exit:
                raise OSError()
            try:
                os.remove(self._index_file)
            except:
                pass
            os.rename(self._tmp_file, self._index_file)
            with open(self._last_mod_file, 'w') as f:
                f.write(str(curr_modif))
            log.info('indexing %s done' % self._dir)
        except:
            try:
                os.remove(self._tmp_file)
            except:
                pass

    def terminate(self):
        self._emergency_exit = True
        self.join()


class MountsChecker:
    proc_mounts_path = '/proc/mounts'
    field_sep = ' '

    def __init__(self, remotes, phantoms_dir, mount_dir):
        self._remotes = remotes
        self._phantoms_dir = phantoms_dir
        self._mount_dir = mount_dir
        self._phantom_processes = {}
        self._index_threads = {}
        self._prepare_directories(phantoms_dir, mount_dir)
        self._delete_old_symlinks()
        self._create_local_connections()

    def _prepare_directories(self, *directories):
        for directory in directories:
            try:
                os.mkdir(directory)
            except FileExistsError:
                pass

    def _delete_old_symlinks(self):
        for entry in os.listdir(self._mount_dir):
            f= pathjoin(self._mount_dir, entry)
            if islink(f):
                os.unlink(f)

    def _create_local_connections(self):
        for name, path in [(remote['name'], remote['path']) for remote in self._remotes if remote['type'] == 'local']:
            self._create_local_connection(name, path)

    def run(self):
        h = 0
        try:
            while True:
                try:
                    time.sleep(1)
                except KeyboardInterrupt:
                    break
                new_h = hash(open(self.proc_mounts_path).read())
                if new_h != h:
                    h = new_h
                    log.debug('/proc/mounts changed')
                    self.check_for_connection_change()
        finally:
            self._close()

    def _close(self):
        for (name, p) in self._phantom_processes.items():
            log.debug("unmounting phantom %s" % name)
            p.terminate()
        self._phantom_processes = {}
        for (name, t) in self._index_threads.items():
            log.debug("killing index thread of %s" % name)
            t.terminate()
            time.sleep(0.1)
        self._index_threads = {}

    def check_for_connection_change(self):
        for remote in self._remotes:
            (rtype, rname, rpath) = (remote['type'], remote['name'], remote['path'])
            if rtype == 'disk':
                self._check_disk_connection_change(rname, rpath)
            elif rtype == 'sshfs':
                self._check_sshfs_connection_change(rname, rpath)
    
    def _mount_phantomfs(self, name):
        if name in self._phantom_processes:
            return False
        mount_point = pathjoin(self._phantoms_dir, name)
        if not exists(mount_point + '.ls'):
            return False
        try:
            os.mkdir(mount_point)
        except FileExistsError:
            pass
        args = []
        if debug:
            args.append('--debug')
        args.extend((mount_point + '.ls', mount_point))
        self._phantom_processes[name] = PhantomFSProcess(*args)
        self._phantom_processes[name].start()
        time.sleep(0.1)
        if self._phantom_processes[name].is_alive():
            return True
        else:
            del(self._phantom_processes[name])
            try:
                os.rmdir(mount_point)
            except:
                pass
            return False

    def _umount_phantomfs(self, name):
        if name in self._phantom_processes:
            self._phantom_processes[name].terminate()
            time.sleep(0.1)
            try:
                os.rmdir(pathjoin(self._phantoms_dir, name))
            except:
                pass
            del(self._phantom_processes[name])

    def _is_not_available(self, name, path, path_exists_fct, real_path_fct):
        mount_point = None
        if path_exists_fct(path):
            rpath = real_path_fct(path)
            mount_points = [line.strip().split(self.field_sep)[1] for line in open(self.proc_mounts_path).readlines() if line.startswith(rpath + self.field_sep)]
            if mount_points:
                mount_point = mount_points[0]
                self._umount_phantomfs(name)
                self._create_symlink(name, mount_point)
                self._index(name, mount_point)
        return mount_point is None

    def _switch_to_phantomfs(self, name):
        if name in self._index_threads:
            self._index_threads[name].terminate()
            del(self._index_threads[name])
        if self._mount_phantomfs(name):
            self._create_symlink(name, pathjoin(self._phantoms_dir, name))

    def _check_disk_connection_change(self, name, path):
        if self._is_not_available(name, path, exists, realpath):
            self._switch_to_phantomfs(name)

    def _parse_sshfs_url(self, url):
        (login, url) = url.split('@') if '@' in url else (None, url)
        (hostport, path) = url.split(':') if ':' in url else (None, None)
        (host, port) = hostport.split(',') if hostport and ',' in hostport else (hostport, '22')
        return login, host, int(port), path

    def _get_sshfs_url(self, login, host, port, path):
        return "{login}{host}{port}:{path}".format(login=login + '@' if login else '', host=host, port=',' + port if port != 22 else '', path=path)
    
    def _check_sshfs_connection_change(self, name, url):
        def connected(url):
            (login, host, port, path) = self._parse_sshfs_url(url)
            if host is None:
                return
            host_connected = True
            try:
                t = Telnet()
                t.open(host, port)
                t.close()
            except OSError:
                host_connected = False
            return host_connected
        if self._is_not_available(name, url, connected, lambda url: self._get_sshfs_url(*self._parse_sshfs_url(url))):
            self._switch_to_phantomfs(name)
    
    def _create_local_connection(self, name, path):
        if exists(path):
            self._create_symlink(name, path)

    def _create_symlink(self, name, mount_point):
        symlink = pathjoin(self._mount_dir, name)
        if islink(symlink):  # true for broken symlinks
            if os.readlink(symlink) == mount_point:
                return
            os.unlink(symlink)
        os.symlink(mount_point, symlink)
        log.info('symlink %s â†’ %s' % (symlink, mount_point))

    def _index(self, name, mount_point):
        if name not in self._index_threads:
            self._index_threads[name] = IndexThread(self._phantoms_dir, name, mount_point)
            self._index_threads[name].start()


def init_logging(debug=False):
    handler = StreamHandler()
    handler.setFormatter(Formatter('%(asctime)s.%(msecs)03d %(threadName)s: [%(name)s] %(message)s', datefmt="%Y-%m-%d %H:%M:%S"))
    root_logger = getLogger()
    if debug:
        handler.setLevel(DEBUG)
        root_logger.setLevel(DEBUG)
    else:
        handler.setLevel(INFO)
        root_logger.setLevel(INFO)
    root_logger.addHandler(handler)

def load_config(home_path):
    config_path = pathjoin(home_path, 'config.yaml')
    with open(config_path, 'r', encoding='utf8') as f:
        return pureyaml.load(f.read())['remotes']

def main(args):
    init_logging(debug)
    ap = ArgumentParser()
    ap.add_argument('catalog_directory', type=str, help="""catalog_directory which:
- contains config.yaml file
- is writable""")
    opts = ap.parse_args(args)
    home_path = realpath(opts.catalog_directory)
    remotes = load_config(home_path)
    phantoms_dir = pathjoin(home_path, '.phantoms')
    mount_dir = pathjoin(home_path, 'mount')
    mc = MountsChecker(remotes, phantoms_dir, mount_dir)
    mc.run()
    
if __name__ == '__main__':
    main(sys.argv[1:])
